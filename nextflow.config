/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    MinderooFoundation/OceanOmics-amplicon-nf Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                      = null
    binddir                    = null
    dbfiles                    = null
    filter_table               = null
    fw_primer                  = "GACCCTATGGAGCTTTAGAC"
    rv_primer                  = "CGCTGTTATCCCTADRGTAACT"

    // Param options
    assay_readlength           = null

    // Demultiplex options
    raw_data                   = null
    cutadapt_error             = 0
    cutadapt_min_len           = 1
    obi3_min_len               = 8
    obi3_demux                 = false
    ulimit                     = 40000

    // Primer trimming options
    primertrim_error           = 2

    // Trim options
    seqtk_trim                 = null
    seqtk_length               = 180

    // ZOTU_workflow options
    zotu_min_quality           = 10
    zotu_min_align_leng        = 6
    zotu_min_size              = 8
    zotu_id                    = 0.97
    zotu_mode                  = "vsearch"
    usearch64                  = null

    // ASV_workflow options
    asv_pooled                 = "true"
    asv_min_overlap            = 12
    asv_max_mismatch           = 0

    // Blast options
    blast_task                 = "blastn"
    blast_pid                  = 95
    blast_evalue               = 0.001
    blast_best_hit_score_edge  = null
    blast_best_hit_overhang    = null
    blast_qcov                 = null
    blast_max_tar_seq          = null

    // LULU options
    lulu_min_match             = 84

    // LCA options
    lca_qcov                   = 100
    lca_pid                    = 97
    lca_diff                   = 1

    // Skipping options
    skip_demux                 = false
    skip_primertrim            = false
    skip_asvs                  = false
    skip_zotus                 = false
    skip_lulu                  = false
    skip_classification        = false

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir                     = null
    tracedir                   = "${params.outdir}/06-pipeline_info"
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'assay_params'


    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null


    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '500.GB'
    max_cpus                   = 500
    max_time                   = '240.h'

    mitodbfiles  = ['https://raw.githubusercontent.com/Computational-Biology-OceanOmics/OceanGenomes-mtDNA/main/results/OceanGenomes_Mitodatabase.fasta.ndb', \
                    'https://raw.githubusercontent.com/Computational-Biology-OceanOmics/OceanGenomes-mtDNA/main/results/OceanGenomes_Mitodatabase.fasta.nhr', \
                    'https://raw.githubusercontent.com/Computational-Biology-OceanOmics/OceanGenomes-mtDNA/main/results/OceanGenomes_Mitodatabase.fasta.nin', \
                    'https://raw.githubusercontent.com/Computational-Biology-OceanOmics/OceanGenomes-mtDNA/main/results/OceanGenomes_Mitodatabase.fasta.njs', \
                    'https://raw.githubusercontent.com/Computational-Biology-OceanOmics/OceanGenomes-mtDNA/main/results/OceanGenomes_Mitodatabase.fasta.nog', \
                    'https://raw.githubusercontent.com/Computational-Biology-OceanOmics/OceanGenomes-mtDNA/main/results/OceanGenomes_Mitodatabase.fasta.nos', \
                    'https://raw.githubusercontent.com/Computational-Biology-OceanOmics/OceanGenomes-mtDNA/main/results/OceanGenomes_Mitodatabase.fasta.not', \
                    'https://raw.githubusercontent.com/Computational-Biology-OceanOmics/OceanGenomes-mtDNA/main/results/OceanGenomes_Mitodatabase.fasta.nsq', \
                    'https://raw.githubusercontent.com/Computational-Biology-OceanOmics/OceanGenomes-mtDNA/main/results/OceanGenomes_Mitodatabase.fasta.ntf', \
                    'https://raw.githubusercontent.com/Computational-Biology-OceanOmics/OceanGenomes-mtDNA/main/results/OceanGenomes_Mitodatabase.fasta.nto']

    caabmap      = ['https://raw.githubusercontent.com/a4000/test_data/main/caab_fishmap/CAAB_FISHMAPPolygon.cst',
                    'https://raw.githubusercontent.com/a4000/test_data/main/caab_fishmap/CAAB_FISHMAPPolygon.dbf',
                    'https://raw.githubusercontent.com/a4000/test_data/main/caab_fishmap/CAAB_FISHMAPPolygon.prj',
                    'https://raw.githubusercontent.com/a4000/test_data/main/caab_fishmap/CAAB_FISHMAPPolygon.shp',
                    'https://raw.githubusercontent.com/a4000/test_data/main/caab_fishmap/CAAB_FISHMAPPolygon.shx']
}

plugins {
    id 'nf-amazon@2.1.3'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load assay_params.config for assay_specific parameters
includeConfig 'conf/assay_params.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load MinderooFoundation/OceanOmics-amplicon-nf custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific instititutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/oceanomics.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/oceanomics profiles: ${params.custom_config_base}/pipeline/oceanomics.config")
// }


profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        docker.runOptions      = params.binddir ? "-v ${params.binddir}:${params.binddir} -u \$(id -u):\$(id -g)" : '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        singularity.runOptions = params.binddir ? "-B ${params.binddir}" : ""
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
    ocom      { includeConfig 'conf/ocom.config'      }
}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'OceanOmics_Amplicon'
    author          = """Adam Bennett"""
    homePage        = 'https://github.com/MinderooFoundation/OceanOmics-amplicon-nf'
    description     = """This pipeline creates a phyloseq object from eDNA amplicon data"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
